#+TITLE: Function Definitions
#+OPTIONS: toc:nil nul:nil ^:nil

* Customized theme functions
** Tomorrow
#+BEGIN_SRC emacs-lisp
(defun my-tomorrow ()
  "Load a customized version of tomorrow."
  (interactive)
  (load-theme 'sanityinc-tomorrow-day t)
  (set-fringe-style '(8 . 0))
  (set-face-attribute 'mode-line nil
                      :foreground "white" :background "#222")
  (set-face-attribute 'linum nil :background "#ffffff")
  (set-face-attribute 'linum nil :foreground "#aaaaaa"))
#+END_SRC

** Twilight
#+BEGIN_SRC emacs-lisp
(defun my-twilight ()
  "Load a customized version of zenburn."
  (interactive)
  (load-theme 'twilight t)
  (set-fringe-style '(8 . 0))
  (set-face-attribute 'linum nil :background "#111")
  (set-face-attribute 'linum nil :foreground "#333"))
#+END_SRC

** Ujelly
#+BEGIN_SRC emacs-lisp
  (defun my-ujelly ()
    "Load a customized version of ujelly."
    (interactive)
    (load-theme 'ujelly t)
    (set-fringe-style '(8 . 0))
    (set-background-color "#111")
    (set-face-background 'vertical-border "#111")
    (set-face-foreground 'vertical-border "#666")
    (set-face-attribute 'mode-line nil
      :foreground "#111" :background "green")
    (set-face-attribute 'mode-line-inactive nil
      :foreground "#111" :background "red")
    (set-face-attribute 'linum nil :background "#111")
    (set-face-attribute 'linum nil :foreground "#2a2a2a"))
#+END_SRC

** Zenburn
#+BEGIN_SRC emacs-lisp
(defun my-zenburn ()
  "Load a customized version of zenburn."
  (interactive)
  (load-theme 'zenburn t)
  (set-fringe-style '(8 . 0))
  (set-background-color "#222")
  (set-face-background 'fringe "#222")
  (set-face-attribute 'mode-line nil
    :foreground "#111" :background "green" :box nil)
  (set-face-attribute 'mode-line-inactive nil
    :foreground "#444444" :background "#1a1a1a" :box nil)
  (set-face-attribute 'linum nil :background "#222")
  (set-face-attribute 'linum nil :foreground "#333"))
#+END_SRC

* Miscellaneous functions.

#+BEGIN_SRC emacs-lisp
  (defun google-region ()
    "Google the selected region."
    (interactive)
    (browse-url (concat "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
                        (buffer-substring (region-beginning) (region-end)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun google-region ()
    "Google the selected region."
    (interactive)
    (browse-url (concat "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
                        (buffer-substring (region-beginning) (region-end)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun insert-date ()
    "Insert a timestamp according to locale's date and time format."
    (interactive)
    (insert (format-time-string "%c" (current-time))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun lorem-ipsum ()
    "Insert a lorem ipsum paragraph at point."
    (interactive)
    (insert
     (concat "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed "
             "do eiusmod tempor incididunt ut labore et dolore magna aliqua."
             " Ut enim ad minim veniam, quis nostrud exercitation ullamco "
             "laboris nisi ut aliquip ex ea commodo consequat. Duis aute "
             "irure dolor in reprehenderit in voluptate velit esse cillum "
             "dolore eu fugiat nulla pariatur. Excepteur sint occaecat "
             "cupidatat non proident, sunt in culpa qui officia deserunt "
             "mollit anim id est laborum.")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun view-url ()
    "Open a new buffer containing the contents of a URL."
    (interactive)
    (let* ((default (thing-at-point-url-at-point))
           (url (read-from-minibuffer "URL: " default)))
      (switch-to-buffer (url-retrieve-synchronously url))
      (rename-buffer url t)
      (cond
       ((search-forward "<?xml" nil t) (xml-mode))
       ((search-forward "<html" nil t) (html-mode)))))
#+END_SRC
